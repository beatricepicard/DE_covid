import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import streamlit as st


def calculate_sir_parameters(country_name, df):
   country_df = df[df["Country"] == country_name].copy()
   if country_df.empty:
       raise ValueError(f"No data found for {country_name}")
   
   country_df.sort_values("Date", inplace=True)
   country_df["DeltaS"] = country_df["Susceptible"].diff()
   country_df["DeltaI"] = country_df["Active"].diff()
   country_df["DeltaR"] = country_df["Recovered"].diff()
   country_df["DeltaD"] = country_df["Deaths"].diff()

   country_df["alpha"] = (-country_df["DeltaR"] + country_df["gamma"] * country_df["Recovered"]) / country_df["Recovered"]
   country_df["beta"] = (-country_df["DeltaS"] + country_df["alpha"] * country_df["Recovered"])* country_df["Population"] / (country_df["Susceptible"] * country_df["Active"])
   country_df["mu"] = country_df["DeltaD"] / country_df["Active"]
   country_df["R0"] = country_df["beta"] / country_df["gamma"]
   
   avg_alpha = country_df["alpha"].mean()
   avg_beta = country_df["beta"].mean()
   avg_mu = country_df["mu"].mean()
   
   df.loc[df["Country"] == country_name, "mu"] = avg_mu
   df.loc[df["Country"] == country_name, "beta"] = avg_beta
   df.loc[df["Country"] == country_name, "alpha"] = avg_alpha
   df.loc[df["Country"] == country_name, "R0"] = country_df["R0"]

   return df

def sir_model(connection, country, start_date, end_date):
    query_combine = "SELECT * FROM new_complete"
    df_sir = pd.read_sql(query_combine, connection)

    df_sir["Susceptible"] = df_sir["Population"] - df_sir["Active"].fillna(0) - df_sir["Deaths"].fillna(0) - df_sir["Recovered"].fillna(0)
    df_sir["mu"] = float("nan")
    df_sir["gamma"] = 1 / 4.5
    df_sir["beta"] = float("nan")
    df_sir["alpha"] = float("nan")
    df_sir["R0"] = float("nan")

    st.header(f"The SIR Model - {country}")
    
    with st.expander("Click for explanation"):
        st.text("The spread of epidemics is often described using the SIR model, which tracks individuals in a population as Susceptible (S), Infected (I), or Recovered (R). In this case, an additional category is included: Deceased (D).")
        st.text("Each day, individuals can either remain in their current state or transition to an adjacent state. For example, an infected person can recover, succumb to the disease, or stay infected, while a deceased individual remains in that state permanently.")
        st.text("The daily changes in the population are governed by the following equations:")
        st.latex(r"\Delta S(t) = \alpha R(t) - \beta S(t) \frac{I(t)}{N}")
        st.latex(r"\Delta I(t) = \beta S(t) \frac{I(t)}{N} - \mu I(t) - \gamma I(t)")
        st.latex(r"\Delta R(t) = \gamma I(t) - \alpha R(t)")
        st.latex(r"\Delta D(t) = \mu I(t)")
        st.text("By estimating the parameters for each country, we can fill in missing values, leading to better predictive performance.")
        st.subheader("What is R0?")
        st.text("R0, or the basic reproduction number, represents the average number of secondary infections generated by a single infected individual in a completely susceptible population.")
        st.text("If R0 > 1, the infection can spread in the population. If R0 < 1, the infection will eventually die out.")

    # Columns for SIR parameters and R0 chart
    col4, col5 = st.columns([1, 1], gap="medium")
    with col4:
        if country:
            try:
                df_sir = calculate_sir_parameters(country, df_sir)
                country_params = df_sir[df_sir["Country"] == country]

                st.subheader("Calculated Parameters")
                st.metric(
                    label = "Adjustment Factor (α)",
                    value = f"{country_params['alpha'].values[0]:.4f}"
                        )
                        
                st.metric(
                    label = "Transmission Rate (β)",
                    value = f"{country_params['beta'].values[0]:.4f}"
                        )

                st.metric(
                    label = "Recovery Rate (γ)",
                    value = f"{country_params['gamma'].values[0]:.4f}"
                        )

                st.metric(
                    label = "Mortality Rate (μ)",
                    value = f"{country_params['mu'].values[0]:.4f}"
                        )
            except Exception as e:
                st.error(f"Error calculating parameters for {country}: {str(e)}")

            with col5:
                st.subheader(f"R0 Over Time")
                fig, ax = plt.subplots()
                df_sir["Date"] = pd.to_datetime(df_sir["Date"])
                start_date = pd.to_datetime(start_date)
                end_date = pd.to_datetime(end_date)
                valid_r0 = df_sir[df_sir["R0"].notna()]
                ax.plot(valid_r0["Date"], valid_r0["R0"], linestyle='-', color="#225EA8")
                ax.set_xlim(mdates.date2num(start_date), mdates.date2num(end_date))
                ax.xaxis.set_major_locator(mdates.AutoDateLocator())
                ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))
                plt.xticks(rotation=0)
                ax.set_ylabel("R0")
                st.pyplot(fig)
